#--*-coding:utf-8-*--

class BattleTech < DiceBot
  
  def initialize
    super
    
    # @sendMode = @@DEFAULT_SEND_MODE #(0=ÁµêÊûú„ÅÆ„Åø,1=0+Âºè,2=1+„ÉÄ„Ç§„ÇπÂÄãÂà•)
    # @sortType = 0;      #„ÇΩ„Éº„ÉàË®≠ÂÆö(1 = ?, 2 = ??, 3 = 1&2„ÄÄÂêÑÂÄ§„ÅÆÊÑèÂë≥„Åå‰∏çÊòé„Åß„ÅôÊáºÛÔΩ¶Ôºâ
    # @sameDiceRerollCount = 0;     #„Çæ„É≠ÁõÆ„ÅßÊåØ„ÇäË∂≥„Åó(0=ÁÑ°„Åó, 1=ÂÖ®ÈÉ®Âêå„ÅòÁõÆ, 2=„ÉÄ„Ç§„Çπ„ÅÆ„ÅÜ„Å°2ÂÄã‰ª•‰∏äÂêå„ÅòÁõÆ)
    # @sameDiceRerollType = 0;   #„Çæ„É≠ÁõÆ„ÅßÊåØ„ÇäË∂≥„Åó„ÅÆ„É≠„Éº„É´Á®ÆÂà•(0=Âà§ÂÆö„ÅÆ„Åø, 1=„ÉÄ„É°„Éº„Ç∏„ÅÆ„Åø, 2=‰∏°Êñπ)
    # @d66Type = 0;        #d66„ÅÆÂ∑Æ„ÅóÊõø„Åà
    # @isPrintMaxDice = false;      #ÊúÄÂ§ßÂÄ§Ë°®Á§∫
    # @upplerRollThreshold = 0;      #‰∏äÊñπÁÑ°Èôê
    # @unlimitedRollDiceType = 0;    #ÁÑ°Èôê„É≠„Éº„É´„ÅÆ„ÉÄ„Ç§„Çπ
    # @rerollNumber = 0;      #ÊåØ„ÇäË∂≥„Åó„Åô„ÇãÊù°‰ª∂
    # @defaultSuccessTarget = "";      #ÁõÆÊ®ôÂÄ§„ÅåÁ©∫Ê¨Ñ„ÅÆÊôÇ„ÅÆÁõÆÊ®ôÂÄ§
    # @rerollLimitCount = 0;    #ÊåØ„ÇäË∂≥„ÅóÂõûÊï∞‰∏äÈôê
    # @fractionType = "omit";     #Á´ØÊï∞„ÅÆÂá¶ÁêÜ ("omit"=Âàá„ÇäÊç®„Å¶, "roundUp"=Âàá„Çä‰∏ä„Åí, "roundOff"=ÂõõÊç®‰∫îÂÖ•)
  end
  
  
  def prefixs
    ['\d*SRM\d+.+', '\d*LRM\d+.+', '\d*BT.+', 'CT', 'DW', 'CD\d+']
  end
  
  def gameName
    '„Éê„Éà„É´„ÉÜ„ÉÉ„ÇØ'
  end
  
  def gameType
    "BattleTech"
  end
  
  def getHelpMessage
    return <<MESSAGETEXT
„ÉªÂà§ÂÆöÊñπÊ≥ï
„ÄÄ(ÂõûÊï∞)BT(„ÉÄ„É°„Éº„Ç∏)(ÈÉ®‰Ωç)+(Âü∫Êú¨ÂÄ§)>=(ÁõÆÊ®ôÂÄ§)
„ÄÄÂõûÊï∞„ÅØÁúÅÁï•ÊôÇ 1Âõ∫ÂÆö„ÄÇ
„ÄÄÈÉ®‰Ωç„ÅØCÔºàÊ≠£Èù¢ÔºâRÔºàÂè≥Ôºâ„ÄÅLÔºàÂ∑¶Ôºâ„ÄÇÁúÅÁï•ÊôÇ„ÅØCÔºàÊ≠£Èù¢ÔºâÂõ∫ÂÆö
„ÄÄUÔºà‰∏äÂçäË∫´Ôºâ„ÄÅLÔºà‰∏ãÂçäË∫´Ôºâ„ÇíÁµÑ„ÅøÂêà„Çè„Åõ CU/RU/LU/CL/RL/LL„ÇÇÊåáÂÆöÂèØËÉΩ
„ÄÄ‰æãÔºâBT3+2>=4
„ÄÄ„ÄÄÊ≠£Èù¢„Åã„Çâ„ÉÄ„É°„Éº„Ç∏3„ÅÆÊîªÊíÉ„ÇíÊäÄËÉΩ„Éô„Éº„Çπ2ÁõÆÊ®ôÂÄ§4„Åß1ÂõûÂà§ÂÆö
„ÄÄ‰æãÔºâ2BT3RL+5>=8
„ÄÄ„ÄÄÂè≥‰∏ãÂçäË∫´„Å´„ÉÄ„É°„Éº„Ç∏3„ÅÆÊîªÊíÉ„ÇíÊäÄËÉΩ„Éô„Éº„Çπ5ÁõÆÊ®ôÂÄ§8„Åß2ÂõûÂà§ÂÆö
„ÄÄ„Éü„Çµ„Ç§„É´„Å´„Çà„Çã„ÉÄ„É°„Éº„Ç∏„ÅØ BT(„ÉÄ„É°„Éº„Ç∏)„ÅÆÂ§â„Çè„Çä„Å´ SRM2/4/6, LRM5/10/15/20„ÇíÊåáÂÆö
„ÄÄ‰æãÔºâ3SRM6LU+5>=8
„ÄÄ„ÄÄÂ∑¶‰∏äÂçäË∫´„Å´SRM6ÈÄ£„ÇíÊäÄËÉΩ„Éô„Éº„Çπ5ÁõÆÊ®ôÂÄ§8„Åß3ÂõûÂà§ÂÆö
„ÉªCTÔºöËá¥ÂëΩÁöÑÂëΩ‰∏≠Ë°®
„ÉªDWÔºöËª¢ÂÄíÂæå„ÅÆÂêë„ÅçË°®
„ÉªCDxÔºö„É°„ÉÉ„ÇØÊà¶Â£´ÊÑèË≠òÁ∂≠ÊåÅË°®„ÄÇ„ÉÄ„É°„Éº„Ç∏ÂÄ§x„ÅßÂà§ÂÆö„ÄÄ‰æãÔºâCD3
MESSAGETEXT
  end
  
  def changeText(string)
    string.sub(/PPC/, 'BT10')
  end
  
  def undefCommandResult
    '1'
  end
  
  def dice_command(string, nick_e)
    secret_flg = false
    
    return '1', secret_flg unless( /(^|\s)(S)?(#{prefixs.join('|')})(\s|$)/i =~ string )
    
    secretMarker = $2
    command = $3
    
    output_msg = executeCommand(command)
    output_msg = '1' if( output_msg.nil? or output_msg.empty? )
    
    output_msg = "#{nick_e}Ôºö#{output_msg}" if(output_msg != '1')
    
    if( secretMarker )   # Èö†„Åó„É≠„Éº„É´
      secret_flg = true if(output_msg != '1')
    end
    
    return output_msg, secret_flg
  end
  
  def executeCommand(command)
    result = nil
    begin
      result = executeCommandCatched(command)
    rescue => e
      debug("executeCommand exception", e.to_s, $@.join("\n"));
    end
    
    return result
  end
  
  def executeCommandCatched(command)
    
    count = 1
    if( /^(\d+)(.+)/ === command )
      count = $1.to_i
      command = $2
    end
    
    debug('executeCommandCatched count', count)
    debug('executeCommandCatched command', command)
    
    case command
    when /^CT$/
      criticalDice, criticalText = getCriticalResult()
      return "#{criticalDice} Ôºû #{criticalText}"
    when /^DW$/
      return getDownResult()
    when /^CD(\d+)$/
      damage = $1.to_i
      return getCheckDieResult(damage)
    when /^((S|L)RM\d+)(.+)/
      tail = $3
      type = $1
      damageFunc = lambda{getXrmDamage(type)}
      return getHitResult(count, damageFunc, tail)
    when /^BT(\d+)(.+)/
      debug('BT pattern')
      tail = $2
      damageValue = $1.to_i
      damageFunc = lambda{ damageValue }
      return getHitResult(count, damageFunc, tail)
    end
    
    return nil
  end
  
  def getXrmDamage(type)
    table, isLrm = getXrmDamageTable(type)
    
    table = table.collect{|i|i*2} unless(isLrm)
    
    damage, dice = get_table_by_2d6(table)
    return damage, dice, isLrm
  end
  
  def getXrmDamageTable(type)
    # table, isLrm
    case type
    when /^SRM2$/i
      [[1,	1,	1,	1,	1,	1,	2,	2,	2,	2,	2], false]
    when /^SRM4$/i
      [[1,	2,	2,	2,	2,	3,	3,	3,	3,	4,	4], false]
    when /^SRM6$/i
      [[2,	2,	3,	3,	4,	4,	4,	5,	5,	6,	6], false]
    when /^LRM5$/i
      [[1,	2,	2,	3,	3,	3,	3,	4,	4,	5,	5], true]
    when /^LRM10$/i
      [[3,	3,	4,	6,	6,	6,	6,	8,	8,	10,	10], true]
    when /^LRM15$/i
      [[5,	5,	6,	9,	9,	9,	9,	12,	12,	15,	15], true]
    when /^LRM20$/i
      [[6,	6,	9,	12,	12,	12,	12,	16,	16,	20,	20], true]
    else
      raise "unknown XRM type:#{type}"
    end
  end
  
  
  @@lrmLimit = 5
  
  
  def getHitResult(count, damageFunc, tail)
    
    return nil unless( /(\w*)(\+\d+)?>=(\d+)/ === tail )
    side = $1
    baseString = $2
    target = $3.to_i
    base = getBaseValue(baseString)
    debug("side, base, target", side, base, target)
    
    partTable = getHitPart(side)
    
    resultTexts = []
    damages = {}
    hitCount = 0
    
    count.times do
      isHit, hitResult = getHitText(base, target)
      resultTexts << hitResult
      
      next unless( isHit )
      hitCount += 1
      
      damages, damageText = getDamages(damageFunc, partTable, damages)
      resultTexts.last << damageText
    end
    
    totalResultText = resultTexts.join("\n")
    
    if( totalResultText.length >= $SEND_STR_MAX )
      totalResultText = "..."
    end
    
    totalResultText << "\n Ôºû #{hitCount}ÂõûÂëΩ‰∏≠"
    totalResultText << " ÂëΩ‰∏≠ÁÆáÊâÄÔºö" + getTotalDamage(damages) if( hitCount > 0 )
    
    return totalResultText
  end
  
  
  def getBaseValue(baseString)
    base = 0
    return base if( baseString.nil? )
    
    base = parren_killer("(" + baseString + ")").to_i
    return base
  end
  
  def getHitPart(side)
    case side
    when /^L$/i
      ['Â∑¶ËÉ¥Ôº†', 'Â∑¶ËÑö', 'Â∑¶ËÖï', 'Â∑¶ËÖï', 'Â∑¶ËÑö', 'Â∑¶ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Âè≥ËÉ¥', 'Âè≥ËÖï', 'Âè≥ËÑö', 'È†≠']
    when /^C$/i, '', nil
      ['ËÉ¥‰∏≠Â§ÆÔº†', 'Âè≥ËÖï', 'Âè≥ËÖï', 'Âè≥ËÑö', 'Âè≥ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Â∑¶ËÉ¥', 'Â∑¶ËÑö', 'Â∑¶ËÖï', 'Â∑¶ËÖï', 'È†≠']
    when /^R$/i
      ['Âè≥ËÉ¥Ôº†', 'Âè≥ËÑö', 'Âè≥ËÖï', 'Âè≥ËÖï', 'Âè≥ËÑö', 'Âè≥ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Â∑¶ËÉ¥', 'Â∑¶ËÖï', 'Â∑¶ËÑö', 'È†≠']
      
    when /^LU$/i
      ['Â∑¶ËÉ¥', 'Â∑¶ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Â∑¶ËÖï', 'Â∑¶ËÖï', 'È†≠']
    when /^CU$/i
      ['Â∑¶ËÖï', 'Â∑¶ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Âè≥ËÉ¥', 'Âè≥ËÖï', 'È†≠']
    when /^RU$/i
      ['Âè≥ËÉ¥', 'Âè≥ËÉ¥', 'ËÉ¥‰∏≠Â§Æ', 'Âè≥ËÖï', 'Âè≥ËÖï', 'È†≠']
      
    when /^LL$/i
      ['Â∑¶ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö']
    when /^CL$/i
      ['Âè≥ËÑö', 'Âè≥ËÑö', 'Âè≥ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö', 'Â∑¶ËÑö']
    when /^RL$/i
      ['Âè≥ËÑö', 'Âè≥ËÑö', 'Âè≥ËÑö', 'Âè≥ËÑö', 'Âè≥ËÑö', 'Âè≥ËÑö']
    else
      raise "unknown hit part side :#{side}"
    end
  end
  
  
  def getHitText(base, target)
    dice1, = roll(1, 6)
    dice2, = roll(1, 6)
    total = dice1 + dice2 + base
    isHit = ( total >= target )
    baseString = (base > 0 ? "+#{base}" : "")
    
    result = "#{total}[#{dice1},#{dice2}#{baseString}]>=#{target} Ôºû "
    
    if( isHit )
      result += "ÂëΩ‰∏≠ Ôºû "
    else
      result += "Â§ñ„Çå"
    end
    
    return isHit, result
  end
  
  
  def getDamages(damageFunc, partTable, damages)
    resultText = ''
    damage, dice, isLrm = damageFunc.call()
    
    damagePartCount = 1
    if( isLrm )
      damagePartCount = (1.0 * damage / @@lrmLimit).ceil
      resultText << "[#{dice}] #{damage}ÁÇπ"
    end
    
    damagePartCount.times do |damageIndex|
      currentDamage, damageText = getDamageInfo(dice, damage, isLrm, damageIndex)
      
      text, part, criticalText = getHitResultOne(damageText, partTable)
      resultText << " " if( isLrm )
      resultText << text
      
      if( damages[part].nil? )
        damages[part] = {
          :partDamages => [],
          :criticals => [],
        }
      end
      
      damages[part][:partDamages] << currentDamage
      damages[part][:criticals] << criticalText unless( criticalText.empty? )
    end
    
    return damages, resultText
  end
  
  
  def getDamageInfo(dice, damage, isLrm, index)
    return damage, "#{damage}" if( dice.nil? )
    return damage, "[#{dice}] #{damage}" unless( isLrm )
    
    currentDamage = damage - (@@lrmLimit * index)
    if( currentDamage > @@lrmLimit )
      currentDamage = @@lrmLimit
    end
    
    return currentDamage, "#{currentDamage}"
  end
  
  
  def getTotalDamage(damages)
    parts = ['È†≠',
             'ËÉ¥‰∏≠Â§Æ',
             'Âè≥ËÉ¥',
             'Â∑¶ËÉ¥', 
             'Âè≥ËÑö',
             'Â∑¶ËÑö',
             'Âè≥ËÖï',
             'Â∑¶ËÖï',]
    
    allDamage = 0
    damageTexts = []
    parts.each do |part|
      damageInfo = damages.delete(part)
      next if( damageInfo.nil? )
      
      damage = damageInfo[:partDamages].inject(0){|sum, i| sum + i}
      allDamage += damage
      damageCount = damageInfo[:partDamages].size
      criticals = damageInfo[:criticals]
      
      text = ""
      text << "#{part}(#{damageCount}Âõû) #{damage}ÁÇπ"
      text << " #{criticals.join(' ')}" unless( criticals.empty? )
      
      damageTexts << text
    end
    
    if( damages.length > 0 )
      raise "damages rest!! #{damages.inspect()}"
    end
    
    result = damageTexts.join(" Ôºè ")
    result += " Ôºû ÂêàË®à„ÉÄ„É°„Éº„Ç∏ #{allDamage}ÁÇπ"
    
    return result
  end
  
  
  def getHitResultOne(damageText, partTable)
    part, value = getPart(partTable)
    
    result = ""
    result << "[#{value}] #{part.gsub(/Ôº†/, 'ÔºàËá¥ÂëΩÁöÑÂëΩ‰∏≠Ôºâ')} #{damageText}ÁÇπ"
    debug('result', result)
    
    index = part.index('Ôº†')
    isCritical = (not index.nil?)
    debug("isCritical", isCritical)
    
    part = part.gsub(/Ôº†/, '')
    
    criticalText = ''
    if( isCritical )
      criticalDice, criticalText = getCriticalResult()
      result << " Ôºû [#{criticalDice}] #{criticalText}"
    end
    
    criticalText = '' if( criticalText == @@noCritical )
    
    return result, part, criticalText
  end
  
  def getPart(partTable)
    diceCount = 2
    if( partTable.length == 6 )
      diceCount = 1
    end
    
    part, value = get_table_by_nD6(partTable, diceCount)
  end
  
  @@noCritical = 'Ëá¥ÂëΩÁöÑÂëΩ‰∏≠„ÅØ„Å™„Åã„Å£„Åü'
  
  def getCriticalResult()
    table = [[ 7, @@noCritical],
             [ 9, '1ÁÆáÊâÄ„ÅÆËá¥ÂëΩÁöÑÂëΩ‰∏≠'],
             [11, '2ÁÆáÊâÄ„ÅÆËá¥ÂëΩÁöÑÂëΩ‰∏≠'],
             [12, '„Åù„ÅÆÈÉ®‰Ωç„ÅåÂêπ„ÅçÈ£õ„Å∂ÔºàËÖï„ÄÅËÑö„ÄÅÈ†≠Ôºâ„Åæ„Åü„ÅØ3ÁÆáÊâÄ„ÅÆËá¥ÂëΩÁöÑÂëΩ‰∏≠ÔºàËÉ¥Ôºâ'],
            ]
    
    dice, = roll(2, 6)
    result = get_table_by_number(dice, table, '')
    
    return dice, result
  end
  
  
  def getDownResult()
    table = ['Âêå„ÅòÔºàÂâçÈù¢„Åã„ÇâËª¢ÂÄíÔºâ Ê≠£Èù¢ÔºèËÉåÈù¢',
             '1„Éò„ÇØ„Çπ„Çµ„Ç§„ÉâÂè≥ÔºàÂÅ¥Èù¢„Åã„ÇâËª¢ÂÄíÔºâ Âè≥ÂÅ¥Èù¢',
             '2„Éò„ÇØ„Çπ„Çµ„Ç§„ÉâÂè≥ÔºàÂÅ¥Èù¢„Åã„ÇâËª¢ÂÄíÔºâ Âè≥ÂÅ¥Èù¢',
             '180Â∫¶ÈÄÜÔºàËÉåÈù¢„Åã„ÇâËª¢ÂÄíÔºâ Ê≠£Èù¢ÔºèËÉåÈù¢',
             '2„Éò„ÇØ„Çπ„Çµ„Ç§„ÉâÂ∑¶ÔºàÂÅ¥Èù¢„Åã„ÇâËª¢ÂÄíÔºâ Â∑¶ÂÅ¥Èù¢',
             '1„Éò„ÇØ„Çπ„Çµ„Ç§„ÉâÂ∑¶ÔºàÂÅ¥Èù¢„Åã„ÇâËª¢ÂÄíÔºâ Â∑¶ÂÅ¥Èù¢',]
    result, dice = get_table_by_1d6(table)
    
    return "#{dice} Ôºû #{result}"
  end
  
  def getCheckDieResult(damage)
    if( damage >= 6 )
      return "Ê≠ª‰∫°"
    end
    
    table = [[1,	3],
             [2,	5],
             [3,	7],
             [4,	10],
             [5,	11]]
    
    target = get_table_by_number(damage, table, nil)
    
    dice1, = roll(1, 6)
    dice2, = roll(1, 6)
    total = dice1 + dice2
    result = ( total >= target ) ? "ÊàêÂäü" : "Â§±Êïó"
    text = "#{total}[#{dice1},#{dice2}]>=#{target} Ôºû #{result}"
    
    return text
  end
  
  #‰ª•‰∏ã„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÅØ„ÉÜ„Éº„Éñ„É´„ÅÆÂèÇÁÖßÁî®„Å´‰æøÂà©
  #get_table_by_2d6(table)
  #get_table_by_1d6(table)
  #get_table_by_nD6(table, 1)
  #get_table_by_nD6(table, count)
  #get_table_by_1d3(table)
  #get_table_by_number(index, table)
  #get_table_by_d66(table)
  
  #„ÉÄ„Ç§„ÇπÁõÆ„ÅåÁü•„Çä„Åü„Åè„Å™„Å£„Åü„Çâ getDiceList „ÇíÂëº„Å≥Âá∫„Åô„Åì„Å®(DiceBot.rb„Å´„Å¶ÂÆöÁæ©)
end
