<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:ResizableWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*"
   visible="false"
   showCloseButton="true"
   >
  
  <mx:Tile id="diceList" width="100%" height="100%"
      paddingLeft="0"
      paddingRight="0"
           >
  </mx:Tile>
  
  <mx:HBox width="100%" height="15"
           horizontalAlign="center"
           verticalGap="1"
           > 
    <mx:Button label="セーブ" click="saveButtons()" height="15" fontWeight="nomal" paddingLeft="1" paddingRight="1" />
    <mx:Button label="ロード" click="loadButtons()" height="15" fontWeight="nomal" paddingLeft="1" paddingRight="1" />
    <mx:Spacer width="100%" />
    <mx:Button label="ボタン追加" click="addButton()" height="15" fontWeight="nomal" paddingLeft="1" paddingRight="1" />
  </mx:HBox>
    
  <mx:Script>

    <![CDATA[
    
        import flash.geom.Point;
        import mx.containers.HBox;
        import mx.controls.Alert;
        import mx.controls.Button;
        import mx.controls.Menu;
        import mx.controls.TextInput;
        import mx.core.Application;
        import mx.core.IFlexDisplayObject;
        import mx.core.UIComponent;
        import mx.events.MenuEvent;
        import mx.utils.StringUtil;
        
        /** 
         * カウンターリモコンウィンドウ用のクラス
         */
        
        //{0} キャラクター名
        //{1} カウンター名
        //{2} 修正値
        private var buttonInfos:Array = null;
        
        private var buttonDefaultInfos:Array = [
    {label:"1D6ダメージ",
     counterName: "HP",
     operator: "minus",
     modifyValue: "1D6+1",
     messageFormat:"{0}に{3}のダメージ！{4}"},
    {label:"HP回復",
     counterName: "HP",
     operator: "plus",
     modifyValue: "",
     messageFormat:"{0}の{1}を{3}回復{4}"},
    {label:"イニシロール",
     counterName: "#INI",
     operator: "equal",
     modifyValue: "1D20+1",
     messageFormat:"{0}のイニシアティブを{2}へ"},
    {label:"夢を渡す",
     counterName: "夢",
     operator: "plus",
     modifyValue: 1,
     messageFormat:"{0}に夢を渡しました{4}"},
    {}];
        
        
        private var saveLoadLocalFile:SaveLoadLocalFile = new SaveLoadLocalFile();
        
        
        static private var thisObj:CounterRemocon;
        
        static public function getInstance():CounterRemocon {
            return thisObj;
        }
        
        public function setInitPosition():void {
            setLoadAddAction( loadSaveDataFromLocalCash );
            
            if( loadPosition() ) {
                return;
            }
            
            setInitPositionDefault();
        }

        
        private function loadSaveDataFromLocalCash(info:Object):void {
            var buttonInfosSaveData:Array = Utils.getJsonDataFromString(info.buttonInfos) as Array;
            if( buttonInfosSaveData == null ) {
                return;
            }
            
            buttonInfos = buttonInfosSaveData;
        }
        
        
        override protected function getWindowInfoSaveData(window:IFlexDisplayObject):Object {
            var info:Object = super.getWindowInfoSaveData(this);
            info.buttonInfos = Utils.getJsonString(buttonInfos);
            
            return info;
        }
        
        
        override public function setInitPositionDefault():void {
            this.x = 30;
            this.y = 70
            this.width = 230;
            this.height = 160;
        }
    
        override public function getSaveInfoKeyName():String {
            return "CounterRemocon";
        }
        
        private var dice:Dice = null;
        
        override public function setup():void {
            thisObj = this;
            setTitle();
            setInitPosition();
            
            initButtons();
            setContextMenu();
            
            saveLoadLocalFile.init("カウンターリモコンセーブデータ", "json", "CounterRemocon",
                                   function(saveData:Object):void { loadSaveData(saveData) } );
        }
        
        public function setTitle():void {
            this.title="カウンター リモコン"
        }
        
        private function setContextMenu():void {
            var menu:ContextMenu = new ContextMenu();
            menu.hideBuiltInItems();
            
            MovablePiece.addMenuItem(menu, "ボタン追加", function():void {addButton()} );
            this.contextMenu = menu;
        }
        
        private function addButton():void {
            var window:ChangeCounterRemoconWindow
            = DodontoF.popup(ChangeCounterRemoconWindow, true) as ChangeCounterRemoconWindow;
        }
        
        private function initButtons():void {
            if( buttonInfos == null ) {
                buttonInfos = buttonDefaultInfos;
            }
            
            clearButtons();
            
            for(var i:int = 0 ; i < buttonInfos.length ; i++) {
                var params:Object = buttonInfos[i];
                if( params.label == null ) {
                    continue;
                }
                
                var button:Button = createButton(params, i);
                diceList.addChild(button);
            }
            
            savePosition();
        }
        
        private function clearButtons():void {
            var buttonList:Array = diceList.getChildren();
            
            for(var i:int = 0 ; i < buttonList.length ; i++) {
                var button:Button = buttonList[i] as Button;
                if( button == null ) {
                    continue;
                }
                
                try {
                    diceList.removeChild(button);
                } catch (e:Error) {
                    Log.loggingError("diceList.removeChild error");
                }
            }
        }
        
        private function createButton(params:Object, index:int):Button {
            var button:Button = new Button();
            
            button.label = params.label;
            button.height = 50;
            button.maxWidth = 200;
            button.setStyle("paddingLeft", 0);
            button.setStyle("paddingRight", 0);
            button.setStyle("fontSize", 10);
            
            button.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
                    Log.logging("click!");
                    thisObj.popupCharacterList(button, index);
                    Log.logging("click end");
                });
            
            initCharacterListPopupContextMenu(button, index);
            
            return button;
        }
        
        private function initCharacterListPopupContextMenu(button:Button, index:int):void {
            var menu:ContextMenu = new ContextMenu();
            menu.hideBuiltInItems();
            
            MovablePiece.addMenuItem(menu, "ボタンの変更", function():void{
                    var window:ChangeCounterRemoconWindow = DodontoF.popup(ChangeCounterRemoconWindow, true) as ChangeCounterRemoconWindow;
                    window.setParams( buttonInfos[index], index );
                });
            
            MovablePiece.addMenuItem(menu, "ボタンの削除", function():void{
                    buttonInfos.splice(index, 1);
                    initButtons();
                }, true);
            
            MovablePiece.addMenuItem(menu, "ボタンの複製", function():void{
                    var button:Object = Utils.clone(buttonInfos[index]);
                    buttonInfos.splice(index + 1, 0, button);
                    initButtons();
                }, true);
            
            MovablePiece.addMenuItem(menu, "ボタンを【←左　　】へ", function():void{
                    if( index == 0 ) {
                        return;
                    }
                    
                    var button:Object = buttonInfos[index];
                    buttonInfos.splice(index, 1);
                    buttonInfos.splice(index - 1, 0, button);
                    initButtons();
                }, true);
            
            MovablePiece.addMenuItem(menu, "ボタンを【　　右→】へ", function():void{
                    if( (index + 1) == buttonInfos.length ) {
                        return;
                    }
                    
                    var button:Object = buttonInfos[index];
                    buttonInfos.splice(index, 1);
                    buttonInfos.splice(index + 1, 0, button);
                    initButtons();
                }, false);
            
            button.contextMenu = menu;
        }
        
        
        private function popupCharacterList(parent:UIComponent, index:int):void {
            Log.logging("popupCharacterList Begin, index", index);
            
            setTitle();
            
            var params:Object = buttonInfos[index];
            Log.logging("params", params);
            
            var menuData:Array = getCharacterListMenuData(params);
            popupMenu(parent, menuData, clickPopupCharacterListHandler);
            
            Log.logging("popupCharacterList End");
        }
        
        
        private function getCharacterListMenuData(params:Object):Array {
            var characters:Array = DodontoF_Main.getInstance().getDodontoF().getLoingUserCharacterList();
            var menuData:Array = [];
            
            for(var i:int = 0 ; i < characters.length ; i++) {
                var character:Character = characters[i];
                var info:Object = getMenuInfo(character, params);
                if( info == null ) {
                    continue;
                }
                menuData.push(info);
            }
            
            var others:Array = getOtherCharactersMenu(characters, params);
            
            if( others.length > 0 ) {
                var childrenInfo:Object = {
                    label: "その他のキャラ",
                    children: others };
                
                menuData.push(childrenInfo);
            }
            
            return menuData;
        }
        
        private function getMenuInfo(character:Character, params:Object):Object {
            if( character == null ) {
                return null;
            }
            
            var info:Object = {
                label: character.getName(),
                character: character,
                pickupCharacter: character,
                params: params,
                type: "normal" };
            
            if( isSelectValue(params.modifyValue) ) {
                info.children = getValueSelectMenu(params, character);
            }
            
            return info;
        }
        
        private function isSelectValue(value:String):Boolean {
            if( value == "" ) {
                return true;
            }
            return false;
        }
        
        
        private function getValueSelectMenu(params:Object, character:Character):Array {
            var result:Array = [];
            
            for(var i:int = 0 ; i < 10 ; i++) {
                var tensPlace:int = i * 10;
                var children:Array = [];
                for(var j:int = 0 ; j < 10 ; j++) {
                    var value:int = tensPlace + j;
                    var valueInfo:Object = getValueMenuItem(params, character, value);
                    children.push(valueInfo);
                }
                
                var tensPlaceInfo:Object = {
                    label: ("" + tensPlace + "〜" + (tensPlace + 9)),
                    children: children,
                    type: "nomal" };
                
                result.push(tensPlaceInfo);
            }
            
            return result;
        }
        
        private function getValueMenuItem(params:Object, character:Character, value:int):Object {
            var params:Object = Utils.clone(params);
            
            params.modifyValue = "" + value;
            
            var valueString:String = "+" + value;
            if( params.operator == "minus" ) {
                valueString = "-" + value;
            } else if( params.operator == "equal" ){
                valueString = "= " + value;
            }
            
            var valueInfo:Object = {
                label: valueString,
                character: character,
                params: params,
                type: "normal" };
            
            return valueInfo;
        }
        
        
        private function getOtherCharactersMenu(exists:Array, params:Object):Array {
            var menuData:Array = [];
            var characters:Array = DodontoF_Main.getInstance().getMap().findExistPiecesByTypeName(Character.getTypeStatic());
            characters.sort( function(a:Character, b:Character):int {
                    return a.getName().localeCompare(b.getName());} );
            
            for(var i:int = 0 ; i < characters.length ; i++) {
                var character:Character = characters[i];
                
                if( isInclude(exists, character) ) {
                    continue;
                }
                
                var info:Object = getMenuInfo(character, params);
                if( info == null ) {
                    continue;
                }
                menuData.push(info);
            }
            
            
            return menuData;
        }
        
        
        private function isInclude(exists:Array, character:Character):Boolean {
            for(var i:int = 0 ; i < exists.length ; i++) {
                if( exists[i].getId() == character.getId() ) {
                    return true;
                }
            }
            return false;
        }
        
        private function popupMenu(parent:UIComponent, menuData:Array, handler:Function):void {
            var menu:Menu = Menu.createMenu(parent, menuData);
            menu.addEventListener("itemClick", handler);
            menu.addEventListener("itemRollOver", rollOverMenuItemEvent);
            
            var point:Point = parent.localToGlobal(new Point(0, 0));
            menu.show(point.x + parent.width, point.y);
        }
        
        
        private function clickPopupCharacterListHandler(event:MenuEvent):void {
            var character:Character = event.item.character;
            if( character == null ) {
                return;
            }
            
            var params:Object = event.item.params;
            if( params == null ) {
                return;
            }
            
            changeCharacterCounter(character, params);
        }
        
        
        private function rollOverMenuItemEvent(event:MenuEvent):void {
            var character:Character = event.item.pickupCharacter;
            if( character == null ) {
                return;
            }
            
            character.pickup();
            character.pickupOnInitiative();
        }
        
        
        static public function get initiativeCounterName():String {
            return "#INI";
        }
        
        private function changeCharacterCounter(character:Character, params:Object):void {
            var counterName:String = params.counterName;
            
            if( counterName == initiativeCounterName ) {
                changeCharacterCounterForInitiative(character, params);
                return;
            }
            
            changeCharacterCounterCommon(character, params, counterName);
            
        }
        
        private function changeCharacterCounterForInitiative(character:Character, params:Object):void {
            var modifyValue:String = params.modifyValue;
            var operator:String = params.operator;
            var messageFormat:String = params.messageFormat;
            
            var initiative:Number = character.getInitiative();
            var initiativeInt:int = Utils.getInitiativeInt( initiative );
            var initiativeModify:int = Utils.getInitiativeModify( initiative );
            var before:String = "" + initiativeInt;
            
            var modifyResult:Object = getModifiedValue(initiativeInt, modifyValue, operator);
            initiativeInt = modifyResult.value;
            initiative = Utils.getInitiative(initiativeInt, initiativeModify);
            
            character.setInitiative(initiative);
            
            var counterName:String = "イニシアティブ値";
            var message:String = getExecuteResultMessage(messageFormat, character.getName(), counterName, 
                                                         before, modifyResult)
            sendCharacterChange(character, message);
        }
        
        
        private function changeCharacterCounterCommon(character:Character, params:Object, counterName:String):void {
            var modifyValue:String = params.modifyValue;
            var operator:String = params.operator;
            var messageFormat:String = params.messageFormat;
            
            var isExistCounterName:Boolean = InitiativeWindow.getInstance().isExistCounterName(counterName);
            
            if( counterName == initiativeCounterName ) {
                isExistCounterName = true;
            }
            
            if( ! isExistCounterName ) {
                var errorMessage:String = "カウンター値に「" + counterName + "」は存在しません";
                this.title = errorMessage;
                Log.printSystemLogPublic(errorMessage);
                return;
            }
            Log.logging("no error.");
            
            var value:int = character.getCounter(counterName);
            var before:String = "" + value;
            
            var modifyResult:Object = getModifiedValue(value, modifyValue, operator);
            character.setCounter(counterName, modifyResult.value);
            
            var message:String = getExecuteResultMessage(messageFormat, character.getName(), counterName,
                                                         before, modifyResult);
            sendCharacterChange(character, message);
        }
       
        static public function getExecuteResultMessage(messageFormat:String, characterName:String, counterName:String, 
                                                       before:String, modifyResult:Object):String {
            var modify:String = "" + modifyResult.text;
            var modifyAbs:String = "" + Math.abs( parseInt(modify) );
            var after:String = modifyResult.value;
            
            if( modifyResult.text == "?" ) {
                modify = "?";
                modifyAbs = "?";
                after = "?";
            }
            
            var result:String = StringUtil.substitute("（{0}：{1}→{2}）", counterName, before, after);
            
            return StringUtil.substitute(messageFormat, 
                                         characterName,   //{0} 相手
                                         counterName,     //{1} カウンター名
                                         modify,          //{2} 修正値
                                         modifyAbs,       //{3} 修正値の絶対値(＋−無し）
                                         result);         //{4} 変更結果
        }
        
        private function sendCharacterChange(character:Character, message:String):void {
            DodontoF_Main.getInstance().getGuiInputSender().getSender()
            .changeCharacter( character.getJsonData(),
                              function(event:Event):void {
                                  sendMessage(message);
                              } );
        }
        
        public function getModifiedValue(value:int, modifyValueString:String, operator:String):Object {
            
            if( isSelectValue(modifyValueString) ) {
                return {value: "?", 
                        text: "?" };
            }
            
            var valueInfo:Object = getValueInfoFromDiceText(modifyValueString);
            var modifyValue:int = valueInfo.value;
            Log.logging("modifyValue", modifyValue);
            Log.logging("valueInfo.text", valueInfo.text);
            
            var text:String = "";
            if( operator == "plus" ) {
                value = (value + modifyValue);
                text = "+" + modifyValue + valueInfo.text;
            } else if( operator == "minus" ) {
                value = (value - modifyValue);
                text = "-" + modifyValue + valueInfo.text;
            } else if( operator == "equal" ) {
                value = modifyValue;
                text = "" + modifyValue + valueInfo.text;
            } else {
                throw "operator:" + operator + "is invalid!";
            }
            
            var result:Object = {
                value: value,
                text: text };
            
            Log.logging("getModifiedValue result", result);
            return result;
        }
        
        private function getValueInfoFromDiceText(diceText:String):Object {
            var params:Object = getDiceParamsFromDiceText(diceText);
            Log.logging("params", params);
            
            if( params.value != null ) {
                return {text:"",
                        value: params.value};
            }
            
            var text:String = "(" + diceText + "→";
            var value:int = 0;
            
            for(var i:int = 0 ; i < params.diceCount ; i++) {
                if( i != 0 ) {
                    text += ",";
                }
                
                var randValue:int = Dice.getRandomNumber(params.diceType);
                text += randValue
                    value += randValue
                    }
            
            text += getModifyString(params.modify) + ")";
            value += params.modify;
            
            var valueInfo:Object = {
                text: text,
                value: value
            };
            
            return valueInfo;
        }
        
        private function getDiceParamsFromDiceText(text:String):Object {
            Log.logging("getValueFromDiceText text", text);
            
            var diceReg:RegExp = /(\d+)D(\d+)((\+|\-)\d+)?/i
            var diceMatchResult:Object = diceReg.exec(text);
            
            if( diceMatchResult == null ) {
                Log.logging("NOT match, so parseInt");
                return {value: parseInt(text)};
            }
            
            var diceCount:int = parseInt(diceMatchResult[1]);
            var diceType:int = parseInt(diceMatchResult[2]);
            var modify:int = 0
            if( diceMatchResult[3] != null ) {
                modify = parseInt(diceMatchResult[3]);
            }
            
            var params:Object = {diceCount:diceCount,
                                 diceType: diceType,
                                 modify: modify};
            Log.logging("getDiceParamsFromDiceText result params", params);
            return params
        }
        
        
        private function getModifyString(modify:int):String { 
            if( modify > 0 ) {
                return "+" + modify;
            } else if( modify < 0 ) {
                return "" + modify;
            }
            
            return "";
        }
        
        
        private function sendMessage(message:String):void {
            var window:ChatWindow = ChatWindow.getInstance();
            window.sendChatMessage(window.publicChatChannel, message);
        }
        
        
        public function changeButtonInfo(params:Object, index:int):void {
            if( index == -1 ) {
                buttonInfos.push(params);
            } else {
                editButtonInfo (params, index);
            }
            
            initButtons();
        }
        
        
        public function editButtonInfo(params:Object, index:int):void {
            var buttonInfo:Object = buttonInfos[index];
            if( buttonInfo == null ) {
                return;
            }
            
            for(var key:String in buttonInfo) {
                buttonInfo[key] = params[key];
            }
        }
        
        private function saveButtons():void {
            saveLoadLocalFile.save(buttonInfos, "CounterRemocon");
        }
        
        private function loadButtons():void {
            saveLoadLocalFile.load();
        }
        
        public function loadSaveData(saveData:Object):void {
            buttonInfos = saveData as Array;
            initButtons();
        }
       
    ]]>
    
  </mx:Script>
  
</torgtaitai:ResizableWindow>
