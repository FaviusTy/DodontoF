<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:CommonPopupWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*" 
   width="680"
   height="420"
   title="カード選択" 
   showCloseButton="true"
   close="closeWindow()"
   >
  
  <mx:Box id="baseBox"
      width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
    
    <mx:Label text="山札のカードは以下の通り。抜き取りたいカードをドラッグしてカード置き場（緑のマットの上）にドロップしてください。" />
    <mx:Tile id="preview" 
           height="100%" width="100%"
           paddingTop="10" paddingBottom="10" 
           paddingRight="10" paddingLeft="10" 
           verticalGap="30" horizontalGap="10" 
           direction="horizontal" 
           borderStyle="solid" 
           tileWidth="50" />

<!--
    <mx:TextArea id="printer"
                 height="20%" width="100%"
                 />
-->

      <mx:ProgressBar id="imageProgressBar" indeterminate="true"
                  width="100%" height="20" minHeight="0" minWidth="0"
                  mode="manual" />
    </mx:Box>
  
  <mx:Script>
    <![CDATA[
    import mx.core.UIComponent;
    import mx.containers.TitleWindow;
    import mx.managers.PopUpManager;
    import mx.controls.TextArea;
    import mx.controls.Alert;
    import mx.events.DragEvent;
    import mx.core.UIComponent;
    import mx.core.IFlexDisplayObject;
    import mx.core.DragSource;
    import mx.managers.DragManager;
    
    private var thisObj:SelectCardWindow;
    
    public function closeWindow():void {
        try {
            map.getCardLayer().removeEventListener(DragEvent.DRAG_DROP, dragDropHandler);
            layer.removeEventListener(DragEvent.DRAG_ENTER, dragEnter);
        } catch(e:Error) {
        }
        PopUpManager.removePopUp(this);
    }
    
    private var map:Map;
    private var layer:UIComponent;
    
    override protected function setup():void {
        thisObj = this;
        
        map = DodontoF_Main.getInstance().getMap();
        layer = map.getCardLayer();
        
        layer.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
        layer.addEventListener(DragEvent.DRAG_ENTER, dragEnter);
    }
    
    public function dragEnter(e:DragEvent):void {
        DragManager.acceptDragDrop(layer);
    }
    
    private var cardMount:CardMount;
    
    public function setMountName(cardMount_:CardMount):void {
        cardMount = cardMount_;
        DodontoF_Main.getInstance().getGuiInputSender().getMountCardInfos(cardMount.getMountName(), printMountCardInfos);
    }
    
    public function printMountCardInfos(event:Event):void {
        Log.loggingTuning("=>printMountCardInfos(event:Event) Begin");
        try {
            imageProgressBar.height = 0;
            imageProgressBar.visible = false;
            
            var jsonData:Object = SharedDataReceiver.getJsonDataFromResultEvent(event);
            var cards:Array = getSortedCards(jsonData as Array);
            
            for(var i:int = 0 ; i < cards.length ; i++) {
                var card:Card = cards[i];
                var component:UIComponent = getCardComponent(card);
                preview.addChild(component);
            }
            
        } catch(e:Error) {
            Log.loggingError("exception : " + e);
        }
        Log.loggingTuning("=>printMountCardInfos(event:Event) End");
    }
    
    
    public function getSortedCards(cardInfos:Array):Array {
        
        cardInfos.sortOn("imgId");
        
        var cards:Array = new Array();
        
        for(var i:int = 0 ; i < cardInfos.length ; i++) {
            var cardInfo:Object = cardInfos[i];
            var card:Card = getCard(cardInfo);
            cards.push(card);
        }
        
        return cards;
    }
    
    private function getCard(cardInfo:Object):Card {
        var card:Card = new Card(cardInfo);
        
        card.init(map, 0, 0);
        card.setRotation(0);
        card.reverseCardLocal(false);
        card.loadViewImage();
        card.setTitleVisible(false);
        
        card.hideContextMenu();
        
        return card;
    }
    
    private var startPosition:Point = new Point();
    
    private function getCardComponent(card:Card):UIComponent {
        var component:UIComponent = new UIComponent();
        component.width = preview.tileWidth;// * 0.8;
        component.height = component.width * 1.5;//preview.tileWidth * 1.5;
        component.addChild(card.getView());
        component.scaleX = 0.5;
        component.scaleY = 0.5;
        
        component.addEventListener(MouseEvent.MOUSE_DOWN, function(event:MouseEvent):void {
                mouseDownHandler(event, card, component);
            });
        
        component.addEventListener(MouseEvent.MOUSE_DOWN, function(event:DragEvent):void {
                dragDropHandler(event);
            });
        
        return component;
    }
    
    
    private function mouseDownHandler(event:MouseEvent, card:Card, component:UIComponent):void{
        //ドラッグされるデータを作成
        var dragSource:DragSource = new DragSource();
        dragSource.addData(card, "card");
        dragSource.addData(component, "component");
        
        //ドラッグ中のイメージを作成
        var length:int = Map.getSquareLength();
        var bitmapData:BitmapData = new BitmapData(104, 154);//card.getWidth(), card.getHeight());
        bitmapData.draw(card.getView());
        var bitmap:Bitmap = new Bitmap();
        bitmap.bitmapData = bitmapData;
        
        var imageProxy:UIComponent = new UIComponent();
        imageProxy.addChild(bitmap);
        
        //ドラッグを開始
        DragManager.doDrag(card.getView(), dragSource, event, imageProxy);
    }
    
    private function dragDropHandler(event:DragEvent):void{
        var card:Card = event.dragSource.dataForFormat("card") as Card;
        var component:UIComponent = event.dragSource.dataForFormat("component") as UIComponent;

        var base:UIComponent = UIComponent(DodontoF_Main.getInstance().getDodontoF());
        var mousePoint:Point = new Point(base.mouseX, base.mouseY);
        var cardPoint:Point = map.getCardLayer().globalToLocal(mousePoint);
        
        var x:int = cardPoint.x - (card.getWidth() / 2);
        var y:int = cardPoint.y - (card.getHeight() / 2);
        
        var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
        guiInputSender.getSender().drawTargetCard( card.getJsonData(),
                                                   cardMount.getSelfOwnerId(),
                                                   cardMount.getSelfOwnerName(),
                                                   cardMount.getId(),
                                                   cardMount.getMountName(),
                                                   card.getId(),
                                                   x, y,
                                                   getRemoveComponentFunction(component));
    }
    
    public function getRemoveComponentFunction(component:UIComponent):Function {
        return function(event:Event):void {
            var jsonData:Object = SharedDataReceiver.getJsonDataFromResultEvent(event);
            //Alert.show(Utils.getJsonString(jsonData));
            
            var result:String = jsonData.result;
            
            if( result == "OK" ) {
                thisObj.preview.removeChild(component);
            }
        }
    }
    
    
             ]]>
  </mx:Script>
  
</torgtaitai:CommonPopupWindow>
